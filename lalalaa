{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Diccionarios.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOxADp7o8hrssU9fKl0LC0p",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/al34n1x/DataScience/blob/master/1.Intro/Diccionarios.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "toc",
        "id": "tcryrJc9HF6m"
      },
      "source": [
        ">[Dictionaries](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=HS7z1Swy73cv)\n",
        "\n",
        ">>[A Simple Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=9lSP0pmF78FH)\n",
        "\n",
        ">>[Accessing Values in a Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=Jx18F46F9JJD)\n",
        "\n",
        ">>[Adding New Key-Value Pairs](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=oWR5E7L-9l4F)\n",
        "\n",
        ">>[Starting with an Empty Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=kzEp44bS-PS_)\n",
        "\n",
        ">>[Modifying Values in a Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=3RjlXan4-aSv)\n",
        "\n",
        ">>[Removing Key-Value Pairs](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=X_Ef5Fk4_RCX)\n",
        "\n",
        ">>[A Dictionary of Similar Objects](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=Rv0AHq50_gdM)\n",
        "\n",
        ">>[Using get() to Access Values](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=lhwK6E-B_-Q3)\n",
        "\n",
        ">>[Looping Through a Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=LnpUWH2iA6f4)\n",
        "\n",
        ">>>[Looping Through All Key-Value Pairs](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=nrfS2OzsBapq)\n",
        "\n",
        ">>>[Looping Through All the Keys in a Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=-TqG5cqTCIIB)\n",
        "\n",
        ">>>[Looping Through a Dictionary’s Keys in a Particular Order](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=gaKVkM_nDX7U)\n",
        "\n",
        ">>>[Looping Through All Values in a Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=ig848DNjDzI0)\n",
        "\n",
        ">>[Nesting](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=j5Y08UVNECHl)\n",
        "\n",
        ">>>[A List of Dictionaries](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=yYhJ5UdJEGmU)\n",
        "\n",
        ">>>[A List in a Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=y8EWUF60Fi42)\n",
        "\n",
        ">>>[A Dictionary in a Dictionary](#updateTitle=true&folderId=1hYY6URNFLa2w5I3uQbpDlwOox_am-5cM&scrollTo=2AfblR__GR2c)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HS7z1Swy73cv"
      },
      "source": [
        "# Diccionarios\n",
        "\n",
        "La comprensión de los diccionarios te permitirá modelar una variedad de objetos del mundo real con mayor precisión. Podrás crear un diccionario que represente a una persona y luego almacenar toda la información que desees sobre la misma. Puede almacenar su nombre, edad, ubicación, profesión y cualquier otro aspecto de una persona que pueda describir. Podrá almacenar dos tipos de información que se puedan comparar, como una lista de palabras y sus significados, una lista de nombres de personas y sus números favoritos, una lista de montañas y sus elevaciones, entre otras cosas.\n",
        "\n",
        "\n",
        "![](https://files.realpython.com/media/How-to-Iterate-Through-A-Dictionary-in-Python_Watermarked.06d6547f531b.jpg)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9lSP0pmF78FH"
      },
      "source": [
        "## Un diccionario simple\n",
        "\n",
        "Considere un juego con extraterrestres que pueden tener diferentes colores y valores en puntos. Este sencillo diccionario almacena información sobre un extraterrestre en particular:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "brgp7PVT7kxR"
      },
      "source": [
        "alien = {'color': 'green', 'points': 5}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pqPHjUno87ib"
      },
      "source": [
        "Un diccionario en Python es una colección de pares clave-valor. Cada clave está conectada a un valor y puede usar una clave para acceder al valor asociado con esa clave. El valor de una clave puede ser un número, una cadena, una lista o incluso otro diccionario. De hecho, puede utilizar cualquier objeto que pueda crear en Python como valor en un diccionario.\n",
        "\n",
        "En Python, un diccionario se incluye entre llaves, **{}**, con una serie de pares clave-valor dentro de las llaves, como se muestra en el ejemplo anterior.\n",
        "\n",
        "Un par clave-valor es un conjunto de valores asociados entre sí. Cuando proporcionas una clave, Python devuelve el valor asociado con esa clave. Cada clave está conectada a su valor por dos puntos y los pares clave-valor individuales están separados por comas. Puede almacenar tantos pares clave-valor como desee en un diccionario"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jx18F46F9JJD"
      },
      "source": [
        "## Acceso a valores en un diccionario\n",
        "Para obtener el valor asociado con una clave, ingresa el nombre del diccionario y luego coloca la clave dentro de un conjunto de corchetes, como se muestra aquí:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gsHc5MYo9Gxp"
      },
      "source": [
        "print(alien['color'])\n",
        "print(alien['points'])\n",
        "\n",
        "# The dictionary alien_0 stores the alien’s color and point value. \n",
        "# The last two lines access and display that information, as shown here:"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U0EqPkOX9ePY"
      },
      "source": [
        "Ahora puede acceder al color o al valor en puntos de alien. Si un jugador derriba a este alienígena, puedes buscar cuántos puntos debería ganar usando un código como este:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5NTT1KqK9dcO"
      },
      "source": [
        "new_points = alien['points']\n",
        "print(f\"You just earned {new_points} points!\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oWR5E7L-9l4F"
      },
      "source": [
        "## Agregando nuevos pares clave-valor\n",
        "Los diccionarios son estructuras dinámicas y puede agregar nuevos pares clave-valor a un diccionario en cualquier momento. Por ejemplo, para agregar un nuevo par clave-valor, debe proporcionar el nombre del diccionario seguido de la nueva clave entre corchetes junto con el nuevo valor."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KwkUJDEP93lM"
      },
      "source": [
        "alien['x_position'] = 0\n",
        "alien['y_position'] = 25\n",
        "print(alien)\n",
        "\n",
        "# As of Python 3.7, dictionaries retain the order in which they were defined. \n",
        "# When you print a dictionary or loop through its elements, \n",
        "# you will see the elements in the same order in which they were added to the dictionary."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kzEp44bS-PS_"
      },
      "source": [
        "## Comenzando con un diccionario vacío\n",
        "A veces es conveniente,  comenzar con un diccionario vacío y luego agregarle cada elemento nuevo. Para comenzar a llenar un diccionario vacío, defina un diccionario con un conjunto vacío de llaves y luego agregue cada par clave-valor en su propia línea. Por ejemplo, aquí se explica cómo crear el diccionario alien_0 con este enfoque:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aTrXajig-Fvj"
      },
      "source": [
        "alien = {}\n",
        "\n",
        "alien['color'] = 'green'\n",
        "alien['points'] = 5\n",
        "\n",
        "print(alien)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3RjlXan4-aSv"
      },
      "source": [
        "## Modificar valores en un diccionario\n",
        "Para modificar un valor en un diccionario, ingrese el nombre del diccionario con la clave entre corchetes y luego el nuevo valor que desea asociar con esa clave. Por ejemplo, considere un extraterrestre que cambia de verde a amarillo a medida que avanza el juego:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oUPA31OF-eDs",
        "outputId": "3ec532e3-98d9-45b8-de3f-1d190ae59331"
      },
      "source": [
        "alien = {'color': 'green'}\n",
        "print(f\"The alien is {alien ['color']}.\")\n",
        "\n",
        "#Insertar código\n",
        "print(f\"The alien is now {alien ['color']}.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The alien is green.\n",
            "The alien is now yellow.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6TR1vo6C-zNe"
      },
      "source": [
        "Para un ejemplo más interesante, rastreemos la posición de un objeto que puede moverse a diferentes velocidades. \n",
        "Almacenaremos un valor que representa la velocidad actual del extraterrestre y luego lo usaremos para determinar qué tan lejos a la derecha debe moverse el extraterrestre:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X4bKTBJe-2Ho"
      },
      "source": [
        "   alien = {'x_position': 0, 'y_position': 25, 'speed': 'medium'}\n",
        "   print(f\"Original position: {alien['x_position']}\")\n",
        "\n",
        "   # Move the alien to the right.\n",
        "   # Determine how far to move the alien based on its current speed.\n",
        "   if alien['speed'] == 'slow':\n",
        "       x_increment = 1\n",
        "   elif alien['speed'] == 'medium':\n",
        "       x_increment = 2\n",
        "   else:\n",
        "       # This must be a fast alien.\n",
        "       x_increment = 3\n",
        "\n",
        "   # The new position is the old position plus the increment.\n",
        "   alien['x_position'] = alien['x_position'] + x_increment\n",
        "\n",
        "   print(f\"New X position: {alien['x_position']}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X_Ef5Fk4_RCX"
      },
      "source": [
        "## Eliminación de pares clave-valor\n",
        "Cuando ya no necesite información almacenada en un diccionario, puede usar la instrucción **del** para eliminar por completo un par clave-valor. Todo lo que necesita es el nombre del diccionario y la clave que desea eliminar.\n",
        "\n",
        "Por ejemplo, eliminemos los 'puntos' clave del diccionario alien_0 junto con su valor:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p8RQTkqQ_QFf"
      },
      "source": [
        "alien = {'color': 'green', 'points': 5}\n",
        "print(alien)\n",
        "\n",
        "del alien['points']\n",
        "print(alien)\n",
        "\n",
        "#Qué otro método podemos utilizar para remover un ítem?\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Rv0AHq50_gdM"
      },
      "source": [
        "## Un diccionario de objetos similares\n",
        "El ejemplo anterior implicó almacenar diferentes tipos de información sobre un objeto, un extraterrestre en un juego. También puede utilizar un diccionario para almacenar un tipo de información sobre muchos objetos. Por ejemplo, supongamos que desea sondear a varias personas y preguntarles cuál es su lenguaje de programación favorito. Un diccionario es útil para almacenar los resultados de una encuesta simple, como esta:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vroA6h52_iw3"
      },
      "source": [
        "favorite_languages = {    ## Mismo resultado, se hace así para poder tener una mejor lectura\n",
        "    'jen': 'python',\n",
        "    'sarah': 'c',\n",
        "    'edward': 'ruby',\n",
        "    'phil': 'python',\n",
        "    }"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a3Vm49TT_wNg"
      },
      "source": [
        "  language = favorite_languages['sarah'].title() #Recuerda que estamos realizando con la llamada al método .title()?\n",
        "  print(f\"Sarah's favorite language is {language}.\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lhwK6E-B_-Q3"
      },
      "source": [
        "## Usando la función get () para acceder a valores\n",
        "El uso de claves entre corchetes para recuperar el valor que le interesa de un diccionario puede causar un problema potencial: si la clave que solicita no existe, obtendrá un error."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LWnED5byAQne"
      },
      "source": [
        "alien = {'color': 'green', 'speed': 'slow'}\n",
        "print(alien['points'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VJthL0wRATt9"
      },
      "source": [
        "El método get () requiere una clave como primer argumento. Como segundo argumento opcional, puede pasar el valor que se devolverá si la clave no existe:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e7RfnAXlAUPC"
      },
      "source": [
        "point_value = alien.get('points', 'No point value assigned.') \n",
        "# El primer argument es por si existe, en caso que no exista, muestra el segundo argumento\n",
        "# Si no agregamos el segundo argumento, Python devolverá None\n",
        "print(point_value)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LnpUWH2iA6f4"
      },
      "source": [
        "## Recorrer un diccionario\n",
        "Un diccionario de Python puede contener unos pocos pares clave-valor o millones de pares. Debido a que un diccionario puede contener grandes cantidades de datos, Python le permite recorrer un diccionario. Los diccionarios se pueden utilizar para almacenar información de diversas formas; por lo tanto, existen varias formas diferentes de recorrerlos. Puede recorrer todos los pares clave-valor de un diccionario, sus claves o sus valores."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nrfS2OzsBapq"
      },
      "source": [
        "### Recorrer todos los pares clave-valor\n",
        "Antes de explorar los diferentes enfoques de los bucles, consideremos un nuevo diccionario diseñado para almacenar información sobre un usuario en un sitio web. El siguiente diccionario almacenaría el nombre de usuario, el nombre y el apellido de una persona:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vG4S_ehzBeko"
      },
      "source": [
        "user = {\n",
        "    'username': 'dlarusso',\n",
        "    'first': 'Daniel',\n",
        "    'last': 'Larusso',\n",
        "    }"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5P4_rxmsBrdw"
      },
      "source": [
        "Puede acceder a cualquier información sobre **user_0** según lo que ya haya aprendido en este capítulo. Pero, ¿y si quisiera ver todo lo almacenado en el diccionario de este usuario? Para hacerlo, puede recorrer el diccionario usando un bucle for:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T3VGtyrzBufb"
      },
      "source": [
        "for key, value in user.items():\n",
        "  print(f\"\\nKey: {key}\")\n",
        "  print(f\"Value: {value}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-TqG5cqTCIIB"
      },
      "source": [
        "### Recorrer todas las claves de un diccionario\n",
        "El método **keys()** es útil cuando no necesita trabajar con todos los valores en un diccionario. Repasemos el diccionario **favorite_languages** e imprimamos los nombres de todos los que participaron en la encuesta:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gB_sagUiCKtz"
      },
      "source": [
        "for name in favorite_languages.keys():\n",
        "  print(name.title())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I99U0FJKCgC-"
      },
      "source": [
        "favorite_languages = {    \n",
        "    'jen': 'python',\n",
        "    'sarah': 'c',\n",
        "    'edward': 'ruby',\n",
        "    'phil': 'python',\n",
        "    }\n",
        "\n",
        "# Agregamos una lista de Friends con dos nombres\n",
        "friends = ['phil', 'sarah']\n",
        "for name in favorite_languages.keys():\n",
        "  print(f\"Hi {name.title()}.\")\n",
        "  if name in friends:\n",
        "    language = favorite_languages[name].title()\n",
        "    print(f\"\\t{name.title()}, I see you love {language}!\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gaKVkM_nDX7U"
      },
      "source": [
        "### Recorrer las claves de un diccionario en un orden particular\n",
        "\n",
        "A partir de Python 3.7, recorrer un diccionario devuelve los elementos en el mismo orden en que se insertaron. A veces, sin embargo, querrá recorrer un diccionario en un orden diferente.\n",
        "\n",
        "Una forma de hacerlo es ordenar las claves a medida que se devuelven en el bucle for. Puede usar la función sorted () para obtener una copia de las claves en orden:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E_33CXarDpve"
      },
      "source": [
        "for name in sorted(favorite_languages.keys()):\n",
        "  print(f\"{name.title()}, thank you for taking the poll.\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ig848DNjDzI0"
      },
      "source": [
        "### Recorrer todos los valores en un diccionario\n",
        "Si está interesado principalmente en los valores que contiene un diccionario, puede usar el método **values()** para devolver una lista de valores sin claves. Por ejemplo, digamos que simplemente queremos una lista de todos los idiomas elegidos en nuestra encuesta de lenguajes de programación sin el nombre de la persona que eligió cada idioma:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KDQ_PD51D1Zg"
      },
      "source": [
        "print(\"The following languages have been mentioned:\")\n",
        "for language in favorite_languages.values():\n",
        "  print(language.title())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j5Y08UVNECHl"
      },
      "source": [
        "## Anidamiento\n",
        "A veces, querrá almacenar varios diccionarios en una lista o una lista de elementos como un valor en un diccionario. A esto se le llama anidamiento. Puede anidar diccionarios dentro de una lista, una lista de elementos dentro de un diccionario o incluso un diccionario dentro de otro diccionario. El anidamiento es una característica poderosa, como lo demostrarán los siguientes ejemplos."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yYhJ5UdJEGmU"
      },
      "source": [
        "### Una lista de diccionarios\n",
        "El diccionario extraterrestre contiene una variedad de información sobre un extraterrestre, pero no tiene espacio para almacenar información sobre un segundo extraterrestre, mucho menos una pantalla llena de extraterrestres. ¿Cómo puedes gestionar una flota de extraterrestres? Una forma es hacer una lista de extraterrestres en la que cada extraterrestre es un diccionario de información sobre ese extraterrestre. Por ejemplo, el siguiente código crea una lista de tres alienígenas:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CQlV8EaYEMkd"
      },
      "source": [
        "alien_0 = {'color': 'green', 'points': 5}\n",
        "alien_1 = {'color': 'yellow', 'points': 10}\n",
        "alien_2 = {'color': 'red', 'points': 15}\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R3OaOU5QET8n",
        "outputId": "ab462cfa-2c57-4809-ad85-59ac8cdf4f8c"
      },
      "source": [
        "aliens = [alien_0, alien_1, alien_2]\n",
        "\n",
        "for alien in aliens:\n",
        "  print(alien)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'color': 'green', 'points': 5}\n",
            "{'color': 'yellow', 'points': 10}\n",
            "{'color': 'red', 'points': 15}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9iPGGcf-Ef_I"
      },
      "source": [
        "# Make an empty list for storing aliens.\n",
        "aliens = []\n",
        "\n",
        "   # Make 30 green aliens.\n",
        "for alien_number in range(30):\n",
        "  new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}\n",
        "  aliens.append(new_alien)\n",
        "\n",
        "   # Show the first 5 aliens.\n",
        "for alien in aliens[:5]:\n",
        "  print(alien)\n",
        "  print(\"...\")\n",
        "\n",
        "   # Show how many aliens have been created.\n",
        "print(f\"Total number of aliens: {len(aliens)}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kbnKUy8QEzq9"
      },
      "source": [
        "# Make an empty list for storing aliens.\n",
        "aliens = []\n",
        "\n",
        "   # Make 30 green aliens.\n",
        "for alien_number in range(30):\n",
        "  if ((alien_number%2==0)):\n",
        "    new_alien = {'number': alien_number,'color': 'green', 'points': 5, 'speed': 'slow'}\n",
        "    aliens.append(new_alien)\n",
        "  else: \n",
        "    new_alien = {'number': alien_number,'color': 'Yellow', 'points': 10, 'speed': 'medium'}\n",
        "    aliens.append(new_alien)\n",
        "\n",
        "   # Show the first 5 aliens.\n",
        "for alien in aliens[:5]:\n",
        "  print(alien)\n",
        "  print(\"...\")\n",
        "\n",
        "   # Show how many aliens have been created.\n",
        "print(f\"Total number of aliens: {len(aliens)}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y8EWUF60Fi42"
      },
      "source": [
        "### Una lista en un diccionario\n",
        "En lugar de poner un diccionario dentro de una lista, a veces es útil poner una lista dentro de un diccionario. Por ejemplo, considere cómo podría describir una pizza que alguien está pidiendo. Si solo usara una lista, todo lo que realmente podría almacenar es una lista de los ingredientes de la pizza. Con un diccionario, una lista de ingredientes puede ser solo un aspecto de la pizza que está describiendo.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a2lq-ZB7Fh5k"
      },
      "source": [
        "pizza = {\n",
        "       'crust': 'thick',\n",
        "       'toppings': ['mushrooms', 'extra cheese'], #Lista dentro de un diccionario\n",
        "       }\n",
        "# Orden.\n",
        "print(f\"You ordered a {pizza['crust']}-crust pizza \"\n",
        "       \"with the following toppings:\")\n",
        "\n",
        "for topping in pizza['toppings']:\n",
        "  print(f\"\\t{topping}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uLxkbwq-F7fM"
      },
      "source": [
        "favorite_languages = {\n",
        "       'jen': ['python', 'ruby'],\n",
        "       'sarah': ['c'],\n",
        "       'edward': ['ruby', 'go'],\n",
        "       'phil': ['python', 'haskell'],\n",
        "       }\n",
        "\n",
        "for name, languages in favorite_languages.items():\n",
        "  print(f\"\\n{name.title()}'s favorite languages are:\")\n",
        "# En este código hay un error, veamos la impresión y discutamos como podemos solucionarlo   \n",
        "for language in languages:\n",
        "  print(f\"\\t{language.title()}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2AfblR__GR2c"
      },
      "source": [
        "### Un diccionario en un diccionario\n",
        "Puede anidar un diccionario dentro de otro diccionario, pero su código puede complicarse rápidamente cuando lo hace. \n",
        "Por ejemplo, si tiene varios usuarios para un sitio web, cada uno con un nombre de usuario único, puede usar los nombres de usuario como claves en un diccionario. A continuación, puede almacenar información sobre cada usuario utilizando un diccionario como valor asociado con su nombre de usuario. En la siguiente lista, almacenamos tres datos sobre cada usuario: su nombre, apellido y ubicación. Accederemos a esta información recorriendo los nombres de usuario y el diccionario de información asociada con cada nombre de usuario:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fi1g-kuaGUwz"
      },
      "source": [
        "users = {\n",
        "       'aeinstein': {\n",
        "           'first': 'albert',\n",
        "           'last': 'einstein',\n",
        "           'location': 'princeton',\n",
        "           },\n",
        "\n",
        "       'mcurie': {\n",
        "           'first': 'marie',\n",
        "           'last': 'curie',\n",
        "           'location': 'paris',\n",
        "           },\n",
        "       }"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z9sYw41XGXE_"
      },
      "source": [
        "for username, user_info in users.items(): #username viene a ser Key, y user_info value\n",
        "  print(f\"\\nUsername: {username}\")\n",
        "  full_name = f\"{user_info['first']} {user_info['last']}\"\n",
        "  location = user_info['location']\n",
        "  print(f\"\\tFull name: {full_name.title()}\")  # \\t nos brinda tabulación en el formato\n",
        "  print(f\"\\tLocation: {location.title()}\")    # \\t nos brinda tabulación en el formato"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
